{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview # This is the documentation for building and using a retractable lever. This project was developed in the Karpova Lab at HHMI's Janelia Research Campus for use in rodent behavioral experiments. Features # Extends and retracts depending on input signal Outputs signal when lever is pressed or released pyControl compatible Durable - faceplate and lever are made of aluminum Fast - 180ms to extend or retract Open - all files are available on GitHub and can be modified to meet custom needs Diagrams # Exploded views # (Left) The servo and lever mount interface using a pin and slot mechanism. (Right) The lever rotates about two spring plungers. Carriage movement # The rotation of the servo arm is translated into linear movement of the carriage along a guide rail Lever function #","title":"Overview"},{"location":"#overview","text":"This is the documentation for building and using a retractable lever. This project was developed in the Karpova Lab at HHMI's Janelia Research Campus for use in rodent behavioral experiments.","title":"Overview"},{"location":"#features","text":"Extends and retracts depending on input signal Outputs signal when lever is pressed or released pyControl compatible Durable - faceplate and lever are made of aluminum Fast - 180ms to extend or retract Open - all files are available on GitHub and can be modified to meet custom needs","title":"Features"},{"location":"#diagrams","text":"","title":"Diagrams"},{"location":"#exploded-views","text":"(Left) The servo and lever mount interface using a pin and slot mechanism. (Right) The lever rotates about two spring plungers.","title":"Exploded views"},{"location":"#carriage-movement","text":"The rotation of the servo arm is translated into linear movement of the carriage along a guide rail","title":"Carriage movement"},{"location":"#lever-function","text":"","title":"Lever function"},{"location":"building/","text":"Building # Hardware # QTY Description Part Number Supplier 2 Press-fit spring plunger 8683A11 McMaster-Carr 7 M3 threaded insert 94510A240 McMaster-Carr 3 M3 x 8 mm flat head screws 92010A118 McMaster-Carr 4 M3 x 8 mm pan head screws 92000A118 McMaster-Carr 4 M2 threaded insert 94510A360 McMaster-Carr 2 M2 x 5 mm screws 92000A012 McMaster-Carr 1 5 x 60 mm linear rail 6725K25 McMaster-Carr 1 5 mm block/carriage 8438K1 McMaster-Carr 1 Servo 35065S00 ServoCity 1 Servo arm 55707 ServoCity 1 Limit switch D2HW-C203MR Digi-Key 3D printed parts # Frame # frame.stl Carriage # carriage.stl Machined parts # Lever # lever.stl lever.step Front Plate # front_plate.dxf Electronics # PCB # PCB source files are on GitHub Bill of Materials # View interactive BOM Qty Reference Description Value/MPN 1 C1 0603 Capacitor 0.1 \u00b5F 1 C2 Electrolytic Capacitor 470 \u00b5F 1 D1 Indicator LED Red 1 J1 RJ45 Jack 0855135013 1 R1 0603 Resistor 20K\u03a9 1 U1 Microcontroller ATTINY24A-SSUR 1 X1 ISP Header 75869-331LF Programming # The ATtiny24 microcontroller is programmed with AVR's ISP (In-circuit Serial Programmer). An Arduino can be used as an ISP or a purpose build programmer can be used. The Makefile and C program can be found here","title":"Building"},{"location":"building/#building","text":"","title":"Building"},{"location":"building/#hardware","text":"QTY Description Part Number Supplier 2 Press-fit spring plunger 8683A11 McMaster-Carr 7 M3 threaded insert 94510A240 McMaster-Carr 3 M3 x 8 mm flat head screws 92010A118 McMaster-Carr 4 M3 x 8 mm pan head screws 92000A118 McMaster-Carr 4 M2 threaded insert 94510A360 McMaster-Carr 2 M2 x 5 mm screws 92000A012 McMaster-Carr 1 5 x 60 mm linear rail 6725K25 McMaster-Carr 1 5 mm block/carriage 8438K1 McMaster-Carr 1 Servo 35065S00 ServoCity 1 Servo arm 55707 ServoCity 1 Limit switch D2HW-C203MR Digi-Key","title":"Hardware"},{"location":"building/#3d-printed-parts","text":"","title":"3D printed parts"},{"location":"building/#frame","text":"frame.stl","title":"Frame"},{"location":"building/#carriage","text":"carriage.stl","title":"Carriage"},{"location":"building/#machined-parts","text":"","title":"Machined parts"},{"location":"building/#lever","text":"lever.stl lever.step","title":"Lever"},{"location":"building/#front-plate","text":"front_plate.dxf","title":"Front Plate"},{"location":"building/#electronics","text":"","title":"Electronics"},{"location":"building/#pcb","text":"PCB source files are on GitHub","title":"PCB"},{"location":"building/#bill-of-materials","text":"View interactive BOM Qty Reference Description Value/MPN 1 C1 0603 Capacitor 0.1 \u00b5F 1 C2 Electrolytic Capacitor 470 \u00b5F 1 D1 Indicator LED Red 1 J1 RJ45 Jack 0855135013 1 R1 0603 Resistor 20K\u03a9 1 U1 Microcontroller ATTINY24A-SSUR 1 X1 ISP Header 75869-331LF","title":"Bill of Materials"},{"location":"building/#programming","text":"The ATtiny24 microcontroller is programmed with AVR's ISP (In-circuit Serial Programmer). An Arduino can be used as an ISP or a purpose build programmer can be used. The Makefile and C program can be found here","title":"Programming"},{"location":"further/","text":"Further Resources # Karpova Lab # Lab website GitHub pyControl # Official documentation Google groups forum GitHub Ready to purchase hardware at Open Ephys Store and Labmaker","title":"Further Resources"},{"location":"further/#further-resources","text":"","title":"Further Resources"},{"location":"further/#karpova-lab","text":"Lab website GitHub","title":"Karpova Lab"},{"location":"further/#pycontrol","text":"Official documentation Google groups forum GitHub Ready to purchase hardware at Open Ephys Store and Labmaker","title":"pyControl"},{"location":"using/","text":"Using # pyControl # This lever works with the pyControl behavior framework. Specifically, this means that the RJ45 pinout is compatible with pyControl. Using an ethernet cable, you can connect the lever to an original breakout board or a D-series breakout board . Example task # Info For the example to work, _lever.py must be downloaded and placed in your devices folder. Then after connecting to you pyboard, use the \"config\" button to \"Load framework\". This will transfer the device files, including _lever.py, from your computer onto the pyboard microcontroller. Below is an example task you can run to test the lever. The task assumes a lever is connected to port 1 of your breakout board. When the task starts, the lever will extend. Pressing the extended lever 3 times will cause the lever to retract. After 1 second, the lever will extend again. The number of presses required and the duration of the retraction are variables that can be adjusted. from pyControl.utility import * from devices import * import pyControl.hardware as _h ## uncomment one of the following two lines depending out which breakout board you are using board = Breakout_1_2 () # original pyboard breakout # board = Breakout_dseries_1_6() # d-series pyboard breakout lever = Lever ( board . port_1 , lever_event = \"lever\" ) states = [ \"available\" , \"retracted\" ] events = [ \"lever\" , \"extend_again\" ] v . press_count___ = 0 v . retract_time_ms = 1000 v . required_presses = 3 initial_state = \"available\" def available ( event ): if event == \"entry\" : lever . extend () v . press_count___ = 0 elif event == \"lever\" : v . press_count___ += 1 if v . press_count___ == v . required_presses : goto_state ( \"retracted\" ) def retracted ( event ): if event == \"entry\" : lever . retract () set_timer ( \"extend_again\" , v . retract_time_ms ) elif event == \"extend_again\" : goto_state ( \"available\" ) For more information on writing your own tasks, refer to the pyControl documentation .","title":"Using"},{"location":"using/#using","text":"","title":"Using"},{"location":"using/#pycontrol","text":"This lever works with the pyControl behavior framework. Specifically, this means that the RJ45 pinout is compatible with pyControl. Using an ethernet cable, you can connect the lever to an original breakout board or a D-series breakout board .","title":"pyControl"},{"location":"using/#example-task","text":"Info For the example to work, _lever.py must be downloaded and placed in your devices folder. Then after connecting to you pyboard, use the \"config\" button to \"Load framework\". This will transfer the device files, including _lever.py, from your computer onto the pyboard microcontroller. Below is an example task you can run to test the lever. The task assumes a lever is connected to port 1 of your breakout board. When the task starts, the lever will extend. Pressing the extended lever 3 times will cause the lever to retract. After 1 second, the lever will extend again. The number of presses required and the duration of the retraction are variables that can be adjusted. from pyControl.utility import * from devices import * import pyControl.hardware as _h ## uncomment one of the following two lines depending out which breakout board you are using board = Breakout_1_2 () # original pyboard breakout # board = Breakout_dseries_1_6() # d-series pyboard breakout lever = Lever ( board . port_1 , lever_event = \"lever\" ) states = [ \"available\" , \"retracted\" ] events = [ \"lever\" , \"extend_again\" ] v . press_count___ = 0 v . retract_time_ms = 1000 v . required_presses = 3 initial_state = \"available\" def available ( event ): if event == \"entry\" : lever . extend () v . press_count___ = 0 elif event == \"lever\" : v . press_count___ += 1 if v . press_count___ == v . required_presses : goto_state ( \"retracted\" ) def retracted ( event ): if event == \"entry\" : lever . retract () set_timer ( \"extend_again\" , v . retract_time_ms ) elif event == \"extend_again\" : goto_state ( \"available\" ) For more information on writing your own tasks, refer to the pyControl documentation .","title":"Example task"}]}